1624466601453:conversion_table_path = "/datastore/nextgenout5/share/labs/Vincent_Lab/members/dbortone/rstudio-common/packages/PostRNASeqAlign/inst/human_ensembl_to_hgnc_entrez/transcript_conversion_table.tsv"
1624466601459:file_prefix = ""
1624466601463:input_file_path = "/datastore/nextgenout5/share/labs/Vincent_Lab/tools/raft/shared/tagged_batches/HugoLo_IPRES_2016/rna_quant/all_20210514/rna_quant__HugoLo_IPRES_2016__all__trans_counts.tsv"
1624466601467:output_dir = "~/scratch/"
1624466601471:this_script_path = ''
1624466611988:thread_num = 24
1624466629943:library(binfotron)
1624466630511:library(magrittr)
1624466630557:library(data.table)
1624466630578:dir.create(output_dir, showWarnings = F)
1624466630587:if(file_prefix != ""){
1624466630592:file_prefix %<>% paste0("__")
1624466630596:} else if (grepl("__trans_counts.tsv$", basename(input_file_path)){
1624466630600:file_prefix = gsub("trans_counts.tsv$", "", basename(input_file_path))
1624466630604:}
1624466630670:readme_path = file.path(output_dir, paste0(file_prefix,"readme.txt"))
1624466630675:if(file.exists(readme_path)){ file.remove(readme_path)}
1624466630684:a = function(...){
1624466630688:my_output = paste0(...)
1624466630692:if(!is.null(readme_path)){
1624466630696:write(my_output, readme_path, append = TRUE)
1624466630701:}
1624466630705:cat(paste0(my_output,"\n"))
1624466630709:}
1624466630717:a("")
1624466630729:# convert to a data table according to the names of the list
1624466630733:#   (ie, use.names = T won't assume the genes are in the same order)
1624466630736:dat = fread(input_file_path)
1624466635513:sample_key = names(dat)[1]
1624466635520:conversion_df = fread(conversion_table_path, data.table = F, select = c("transcript_id","cdna_length"))
1624466636047:a("Droping transcripts where cDNA length is NA")
1624466636062:conversion_df = conversion_df[!is.na(conversion_df$cdna_length), ]
1624466636100:conversion_df = conversion_df[conversion_df$cdna_length > 0, ]
1624466636169:a("Calculating transcript length / 1000.")
1624466636175:transcript_length_per_k_lut = conversion_df$cdna_length/1000
1624466636180:names(transcript_length_per_k_lut) = conversion_df$transcript_id
1624466636184:rm(conversion_df)
1624466636192:dat = dat[,c(sample_key, names(transcript_length_per_k_lut)), with = F]
1624466636608:a("Calculating sample totals.")
1624466636613:# sub_dat = dat[, 1:40000]
1624466636618:# with 4 cores 40K columns ran in 19 sec instead of 26
1624466659225:if(file_prefix != ""){
1624466659228:file_prefix %<>% paste0("__")
1624466659231:} else if (grepl("__trans_counts.tsv$", basename(input_file_path)){
1624466659234:file_prefix = gsub("trans_counts.tsv$", "", basename(input_file_path))
1624466659237:}
1624466678775:if(file_prefix != ""){
1624466678779:file_prefix %<>% paste0("__")
1624466678782:} else if (grepl("__trans_counts.tsv$", basename(input_file_path))){
1624466678785:file_prefix = gsub("trans_counts.tsv$", "", basename(input_file_path))
1624466678788:}
1624466685290:thread_num
1624466691069:ptm <- proc.time()
1624466691073:sample_totals = dat[, parallel::mclapply(.SD, sum, na.rm=TRUE, mc.cores = thread_num), .SDcols=2:ncol(dat) ]
1624467824163:proc.time() - ptm
1624471202711:1133/60
1624471240367:View(sample_totals)
1624471283150:names(sample_totals)
1624471332949:class(sample_totals)
1624471333287:dim(sample_totals)
1624471360690:View(sample_totals[,1:10])
1624471408225:# proc.time() - ptm
1624471408229:sum(dat[1,2:ncol(dat)])
1624471582013:library(matrixStats)
1624471760130:library(matrixStats)
1624471760135:ptm <- proc.time()
1624471760140:sum_dat = dat[, `:=`,(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat)]
1624471760339:proc.time() - ptm
1624471816256:count_mtrx = dat[,2:ncol(dat)] %>% as.matrix
1624471824182:dim(count_mtrx)
1624471834051:sum_dat = count_mtrx[, `:=`,(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(count_mtrx)]
1624471868851:sum_dat = dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(count_mtrx)]
1624471910061:ptm <- proc.time()
1624471910068:sum_dat = dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(count_mtrx)]
1624471916689:proc.time() - ptm
1624471937240:ptm <- proc.time()
1624471937253:sum_dat = dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(100)]
1624471937415:proc.time() - ptm
1624471950226:ptm <- proc.time()
1624471950235:sum_dat = dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:100]
1624471950487:proc.time() - ptm
1624471959152:class(sum_dat)
1624471965319:View(sum_dat)
1624472128751:dim(sum_dat)
1624472128970:dim(dat)
1624472251245:sub_dat = dat[,1:100]
1624472270968:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:100]
1624472278575:View(sum_dat)
1624472306331:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SDcols=2:100, na.rm=T))]
1624472341616:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:100, by=1:nrow(sub_dat)]
1624472350927:View(sum_dat)
1624472380510:sub_dat = dat[,1:5]
1624472380662:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472384706:View(sum_dat)
1624472423193:5248.790 + 10153.395 + 1600.003 + 12577.809
1624472509482:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472531972:sum_dat = sum_dat[,c(1,ncol(sum_dat))]
1624472536400:View(sum_dat)
1624472549667:sum_dat = sub_dat[, `:=`(SUM = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472557422:View(sum_dat)
1624472642358:names(sum_lut) = sum_dat[[1]]
1624472645635:sum_lut = sum_dat$total
1624472645640:names(sum_lut) = sum_dat[[1]]
1624472651440:sum_lut = sum_dat$total
1624472655179:sum_lut
1624472659776:sum_dat = sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472659791:sum_lut = sum_dat$total
1624472662279:names(sum_lut) = sum_dat[[1]]
1624472664656:sum_lut
1624472689263:sub_dat = dat[,1:5]
1624472694374:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472699902:View(sub_dat)
1624472737417:sub_dat = dat[,1:5]
1624472737577:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:5, by=1:nrow(sub_dat)]
1624472737588:sum_lut = sub_dat$total
1624472737593:names(sum_lut) = sub_dat[[1]]
1624472737604:head(sum_lut)
1624472869304:sub_dat = dat[,1:5]
1624472869857:ptm <- proc.time()
1624472869862:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(sub_dat), by=1:nrow(sub_dat)]
1624472869871:proc.time() - ptm
1624472906339:View(sub_dat)
1624472990858:sub_dat = dat[,1:5000]
1624472991036:ptm <- proc.time()
1624472991041:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(sub_dat), by=1:nrow(sub_dat)]
1624472993255:proc.time() - ptm
1624473037838:sub_dat = dat[,1:50000]
1624473038048:ptm <- proc.time()
1624473038052:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(sub_dat), by=1:nrow(sub_dat)]
1624473059474:proc.time() - ptm
1624473069044:dim(dat)
1624473073718:sub_dat = dat
1624473073726:ptm <- proc.time()
1624473073731:sub_dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(sub_dat), by=1:nrow(sub_dat)]
1624473143604:proc.time() - ptm
1624473233647:View(sub_dat)
1624473385543:names(dat)[ncol(dat)]
1624473416614:dim(dat)
1624473428186:names(dat)[ncol(dat)]
1624473442317:total_lut = dat$total
1624473442330:names(total_lut) = dat[[1]]
1624473442335:dat[ , total := NULL]
1624473489121:class(dat)
1624473509403:dat[ , total := NULL]
1624473584018:dat[ , c('total') := NULL]
1624473591055:names(dat)[ncol(dat)]
1624473619883:library(data.table)
1624473627300:dat[ , total := NULL]
1624473646591:head(total_lut)
1624473652532:sum(dat[1,2:ncol(dat)])
1624473677783:sum(is.na(dat)))
1624473685516:sum(is.na(dat))
1624473703170:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)]
1624473733269:ptm <- proc.time()
1624473733273:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)]
1624473790125:proc.time() - ptm
1624473937740:ptm <- proc.time()
1624473937745:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)]
1624473995793:proc.time() - ptm
1624474076620:dat[dat==0] = NA
1624474333384:# sub_dat = dat[, 1:40000]
1624474333388:# with 4 cores 40K columns ran in 19 sec instead of 26
1624474333393:# with 24 cores all isoforms took 1130 sec
1624474333396:# ptm <- proc.time()
1624474333402:# sample_totals = dat[, parallel::mclapply(.SD, sum, na.rm=TRUE, mc.cores = thread_num), .SDcols=2:ncol(dat) ]
1624474333409:# proc.time() - ptm
1624474333414:# use () around it to have data.table check the var name
1624474333419:dat[is.na(dat)] = 0
1624474372156:head(total_lut)
1624474379784:head(transcript_length_per_k_lut)
1624475047470:all(names(dat) == names(transcript_length_per_k_lut))
1624475059540:all(names(dat)[-1] == names(transcript_length_per_k_lut))
1624475067191:ncol(dat)
1624475071809:length(transcript_length_per_k_lut)
1624475087579:dat = fread(input_file_path)
1624475091706:sample_key = names(dat)[1]
1624475091739:conversion_df = fread(conversion_table_path, data.table = F, select = c("transcript_id","cdna_length"))
1624475091900:a("Droping transcripts where cDNA length is NA")
1624475091923:conversion_df = conversion_df[!is.na(conversion_df$cdna_length), ]
1624475091950:conversion_df = conversion_df[conversion_df$cdna_length > 0, ]
1624475091975:a("Calculating cdna_length/1000.")
1624475092024:transcript_length_per_k_lut = conversion_df$cdna_length/1000
1624475092033:names(transcript_length_per_k_lut) = conversion_df$transcript_id
1624475092038:rm(conversion_df)
1624475097336:dat = dat[,c(sample_key, names(transcript_length_per_k_lut)), with = F]
1624475107187:ptm <- proc.time()
1624475107208:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)] # 56-60 sec
1624475164962:proc.time() - ptm
1624475173778:total_lut = dat$total
1624475173789:names(total_lut) = dat[[1]]
1624475173793:dat[ , total := NULL]
1624475180952:length(total_lut)
1624475188345:head(total_lut)
1624475211522:sum(dat[1,2:ncol])
1624475232104:sum(is.na(dat[1,2:ncol]))
1624475252991:sum(dat[1,2:ncol(dat)])
1624475273625:length(transcript_length_per_k_lut)
1624475277943:dim(dat)
1624475299844:all(names(transcript_length_per_k_lut) == names(dat)[-1])
1624475364535:head(total_lut)
1624475369782:total_lut = total_lut/1000000
1624475381961:head(total_lut)
1624475492504:transcript_length_per_k_lut[transcript_length_per_k_lut]
1624475503976:transcript_length_per_k_lut[c_index]
1624475529980:ptm <- proc.time()
1624475529989:for (c_index in 2:1000){
1624475529993:dat[[c_index]] = dat[[c_index]]/transcript_length_per_k_lut[c_index]
1624475529997:}
1624475544269:proc.time() - ptm
1624475895811:mat<-matrix(1,ncol=2,nrow=2,TRUE)
1624475895818:dev<-c(5,10)
1624475898761:mat
1624475902622:dev<-c(5,10)
1624475908617:mat %*% diag(1/dev)
1624476035418:sub_mat = dat[,2:100] %>% as.matrix
1624476042697:library(magrittr)
1624476044451:sub_mat = dat[,2:100] %>% as.matrix
1624476050568:View(sub_mat)
1624476064443:sub_length_lut = transcript_length_per_k_lut[1:99]
1624476070576:dim(sub_mat)
1624476077941:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476099571:sub_mat = dat[,2:1000] %>% as.matrix
1624476099694:sub_length_lut = transcript_length_per_k_lut[1:999]
1624476099699:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476128158:sub_mat = dat[,2:1000] %>% as.matrix
1624476128268:sub_length_lut = transcript_length_per_k_lut[1:999]
1624476128292:ptm <- proc.time()
1624476128317:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476128375:proc.time() - ptm
1624476133448:sub_mat = dat[,2:1000] %>% as.matrix
1624476133560:sub_length_lut = transcript_length_per_k_lut[1:999]
1624476133565:ptm <- proc.time()
1624476133569:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476133599:proc.time() - ptm
1624476142536:sub_mat = dat[,2:10000] %>% as.matrix
1624476142794:sub_length_lut = transcript_length_per_k_lut[1:9999]
1624476142798:ptm <- proc.time()
1624476142801:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476145059:proc.time() - ptm
1624476158423:sub_mat = dat[,2:100000] %>% as.matrix
1624476159925:sub_length_lut = transcript_length_per_k_lut[1:99999]
1624476160079:ptm <- proc.time()
1624476160218:sub_mat = sub_mat %*% diag(1/sub_length_lut)
1624476342004:proc.time() - ptm
1624477517347:dat[,2,ncol(dat)] = data.frame(mat)
1624477526447:dat[,2:ncol(dat)] = data.frame(mat)
1624477546798:dat = fread(input_file_path)
1624477550917:sample_key = names(dat)[1]
1624477550924:conversion_df = fread(conversion_table_path, data.table = F, select = c("transcript_id","cdna_length"))
1624477551442:a("Droping transcripts where cDNA length is NA")
1624477551451:conversion_df = conversion_df[!is.na(conversion_df$cdna_length), ]
1624477551475:conversion_df = conversion_df[conversion_df$cdna_length > 0, ]
1624477551501:a("Calculating cdna_length/1000.")
1624477551506:transcript_length_per_k_lut = conversion_df$cdna_length/1000
1624477551510:names(transcript_length_per_k_lut) = conversion_df$transcript_id
1624477551514:rm(conversion_df)
1624477551521:dat = dat[,c(sample_key, names(transcript_length_per_k_lut)), with = F]
1624477561774:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)] # 56-60 sec
1624477634433:# proc.time() - ptm
1624477634440:total_lut = dat$total/1000000
1624477634449:names(total_lut) = dat[[1]]
1624477634453:dat[ , total := NULL]
1624478087729:mat = dat %>% as.matrix
1624478110593:ptm <- proc.time()
1624478110598:mat = mat %*% diag(1/transcript_length_per_k_lut)
1624478112728:proc.time() - ptm
1624478112734:dat[,2:ncol(dat)] = data.frame(mat)
1624478166492:mat = dat[,2:ncol(dat)] %>% as.matrix
1624478169302:ptm <- proc.time()
1624478169307:mat = mat %*% diag(1/transcript_length_per_k_lut)
1624478170733:proc.time() - ptm
1624478170738:dat[,2:ncol(dat)] = data.frame(mat)
1624478194033:diag(1/transcript_length_per_k_lut)
1624478241623:diag(1/transcript_length_per_k_lut[1:3])
1624478427984:mat = dat[,2:ncol(dat)] %>% as.matrix
1624478430458:ptm <- proc.time()
1624478430462:# mat = mat %*% diag(1/transcript_length_per_k_lut)
1624478430466:mat = t(t(mat) / transcript_length_per_k_lut)
1624478430655:proc.time() - ptm
1624478430661:dat[,2:ncol(dat)] = data.frame(mat)
1624478442172:dim(mat)
1624478491495:mat<-matrix(1,ncol=3,nrow=2,TRUE)
1624478491566:dev<-c(1,2,3)
1624478494492:mat
1624478505923:t(t(mat) / dev)
1624478593402:mat = mat/total_lut
1624478599195:dim(mat)
1624478605769:mat = dat[,2:ncol(dat)] %>% as.matrix
1624478608292:ptm <- proc.time()
1624478608297:# mat = mat %*% diag(1/transcript_length_per_k_lut)
1624478608300:a("Divide each gene column by its cdna_length/1000")
1624478608306:mat = t(t(mat) / transcript_length_per_k_lut)
1624478608488:mat = mat/total_lut
1624479101293:dat = fread(input_file_path)
1624479105307:sample_key = names(dat)[1]
1624479105315:conversion_df = fread(conversion_table_path, data.table = F, select = c("transcript_id","cdna_length"))
1624479105432:a("Droping transcripts where cDNA length is NA")
1624479105438:conversion_df = conversion_df[!is.na(conversion_df$cdna_length), ]
1624479105469:conversion_df = conversion_df[conversion_df$cdna_length > 0, ]
1624479105499:a("Calculating cdna_length/1000.")
1624479105504:transcript_length_per_k_lut = conversion_df$cdna_length/1000
1624479105508:names(transcript_length_per_k_lut) = conversion_df$transcript_id
1624479105512:rm(conversion_df)
1624479105517:dat = dat[,c(sample_key, names(transcript_length_per_k_lut)), with = F]
1624479105724:# tried geting sample totals with data.frame operation but it was slower
1624479105729:# sub_dat = dat[, 1:40000]
1624479105734:# with 4 cores 40K columns ran in 19 sec instead of 26
1624479105738:# with 24 cores all isoforms took 1130 sec
1624479105742:# ptm <- proc.time()
1624479105745:# sample_totals = dat[, parallel::mclapply(.SD, sum, na.rm=TRUE, mc.cores = thread_num), .SDcols=2:ncol(dat) ]
1624479105749:# proc.time() - ptm
1624479105753:# use () around it to have data.table check the var name
1624479105760:a("Calculating sample totals.")
1624479105765:dat[, `:=`(total = rowSums(.SD, na.rm=T)), .SDcols=2:ncol(dat), by=1:nrow(dat)] # 56-60 sec
1624479166368:total_lut = dat$total/1000000
1624479166378:names(total_lut) = dat[[1]]
1624479166382:dat[ , total := NULL]
1624479166417:# > all(names(transcript_length_per_k_lut) == names(dat)[-1])
1624479166421:# [1] TRUE
1624479166424:# ptm <- proc.time()
1624479166428:# for (c_index in 2:1000){ # 13 sec for 1000?!?
1624479166432:#   dat[[c_index]] = dat[[c_index]]/transcript_length_per_k_lut[c_index]
1624479166436:# }
1624479166440:# proc.time() - ptm
1624479166444:# mat %*% diag(1/dev),
1624479166450:# https://stackoverflow.com/questions/20596433/how-to-divide-each-row-of-a-matrix-by-elements-of-a-vector-in-r
1624479166454:mat = dat[,2:ncol(dat)] %>% as.matrix
1624479168749:ptm <- proc.time()
1624479168753:# mat = mat %*% diag(1/transcript_length_per_k_lut)
1624479168757:a("Divide each gene column by its cdna_length/1000")
1624479168764:mat = t(t(mat) / transcript_length_per_k_lut)
1624479168957:a("Divide each sample row by its sample_total/1,000,000")
1624479168962:mat = mat/total_lut
1624479169015:proc.time() - ptm
1624479169021:dat[,2:ncol(dat)] = data.frame(mat)
1624479298017:bak_dat = dat
1624479314281:View(bak_dat[1:10,1:10])
1624479339476:dat = fread(input_file_path)
1624479343453:sample_key = names(dat)[1]
1624479343461:conversion_df = fread(conversion_table_path, data.table = F, select = c("transcript_id","cdna_length"))
1624479343577:a("Droping transcripts where cDNA length is NA")
1624479343583:conversion_df = conversion_df[!is.na(conversion_df$cdna_length), ]
1624479343611:conversion_df = conversion_df[conversion_df$cdna_length > 0, ]
